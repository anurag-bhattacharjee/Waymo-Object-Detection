{"cells":[{"cell_type":"markdown","metadata":{"id":"WTZWp5nJKhSI"},"source":["# Video Classification with a CNN-RNN Architecture\n","\n","**Author:** [Sayak Paul](https://twitter.com/RisingSayak)<br>\n","**Date created:** 2021/05/28<br>\n","**Last modified:** 2021/06/05<br>\n","**Description:** Training a video classifier with transfer learning and a recurrent model on the UCF101 dataset."]},{"cell_type":"markdown","metadata":{"id":"aQtcIZAjKhTL"},"source":["This example demonstrates video classification, an important use-case with\n","applications in recommendations, security, and so on.\n","We will be using the [UCF101 dataset](https://www.crcv.ucf.edu/data/UCF101.php)\n","to build our video classifier. The dataset consists of videos categorized into different\n","actions, like cricket shot, punching, biking, etc. This dataset is commonly used to\n","build action recognizers, which are an application of video classification.\n","\n","A video consists of an ordered sequence of frames. Each frame contains *spatial*\n","information, and the sequence of those frames contains *temporal* information. To model\n","both of these aspects, we use a hybrid architecture that consists of convolutions\n","(for spatial processing) as well as recurrent layers (for temporal processing).\n","Specifically, we'll use a Convolutional Neural Network (CNN) and a Recurrent Neural\n","Network (RNN) consisting of [GRU layers](https://keras.io/api/layers/recurrent_layers/gru/).\n","This kind of hybrid architecture is popularly known as a **CNN-RNN**.\n","\n","This example requires TensorFlow 2.5 or higher, as well as TensorFlow Docs, which can be\n","installed using the following command:"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"y8CXQ558KhTe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648748716435,"user_tz":420,"elapsed":24888,"user":{"displayName":"Anurag Bhattacharjee","userId":"08854261231076586025"}},"outputId":"ae5677fc-b8fe-4c3b-d6b4-27145ff7ea10"},"outputs":[{"output_type":"stream","name":"stdout","text":["  Building wheel for tensorflow-docs (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}],"source":["!pip install -q git+https://github.com/tensorflow/docs"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TyO0NgHhUcML","executionInfo":{"status":"ok","timestamp":1648748923035,"user_tz":420,"elapsed":206612,"user":{"displayName":"Anurag Bhattacharjee","userId":"08854261231076586025"}},"outputId":"3ffe7269-a03d-4f1f-bfa0-c8f445675c31"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"markdown","metadata":{"id":"Yd5dpKOaKhTy"},"source":["## Data collection\n","\n","In order to keep the runtime of this example relatively short, we will be using a\n","subsampled version of the original UCF101 dataset. You can refer to\n","[this notebook](https://colab.research.google.com/github/sayakpaul/Action-Recognition-in-TensorFlow/blob/main/Data_Preparation_UCF101.ipynb)\n","to know how the subsampling was done."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ATkD2z_UKhT4"},"outputs":[],"source":["#!wget -q https://drive.google.com/drive/folders/1XHm60Om08w6AnHf7RE2F3YE92zeUNvMk?usp=sharing"]},{"cell_type":"markdown","metadata":{"id":"M8jpmbv0KhT8"},"source":["## Setup"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"sXJRC2c-KhUc","executionInfo":{"status":"ok","timestamp":1648701926879,"user_tz":420,"elapsed":3324,"user":{"displayName":"Anurag Bhattacharjee","userId":"08854261231076586025"}}},"outputs":[],"source":["from tensorflow_docs.vis import embed\n","from tensorflow import keras\n","from imutils import paths\n","from keras.applications.vgg16 import VGG16\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","import pandas as pd\n","import numpy as np\n","import imageio\n","import cv2\n","import os"]},{"cell_type":"markdown","metadata":{"id":"lacEsePlKhVR"},"source":["## Define hyperparameters"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"MulYbsLmKhVi","executionInfo":{"status":"ok","timestamp":1648702071966,"user_tz":420,"elapsed":264,"user":{"displayName":"Anurag Bhattacharjee","userId":"08854261231076586025"}}},"outputs":[],"source":["IMG_SIZE = 224\n","BATCH_SIZE = 64\n","EPOCHS = 1\n","\n","MAX_SEQ_LENGTH = 20\n","NUM_FEATURES = 8192"]},{"cell_type":"markdown","metadata":{"id":"6-Ojw_ZGKhVw"},"source":["## Data preparation"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"w8ONQoxQKhV0","executionInfo":{"status":"ok","timestamp":1648701973551,"user_tz":420,"elapsed":315,"user":{"displayName":"Anurag Bhattacharjee","userId":"08854261231076586025"}},"outputId":"b69cd3d9-1f97-4e23-a102-27036d7e6b52"},"outputs":[{"output_type":"stream","name":"stdout","text":["Total videos for training: 8\n","Total videos for testing: 4\n"]},{"output_type":"execute_result","data":{"text/plain":["                               video_name                   tag\n","1                human trajectory changed  negative interaction\n","0  cyclist trajectory is slightly changed  negative interaction\n","7                        train_positive_2  positive interaction\n","6                        train_positive_1  positive interaction\n","5                               test1 (3)  positive interaction\n","3                               test1 (1)  positive interaction\n","4                               test1 (2)  positive interaction\n","2                    j-walking pedestrian  negative interaction"],"text/html":["\n","  <div id=\"df-bb2965c7-0cdf-4ef1-867d-0f4ba7f5d394\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>video_name</th>\n","      <th>tag</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>human trajectory changed</td>\n","      <td>negative interaction</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>cyclist trajectory is slightly changed</td>\n","      <td>negative interaction</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>train_positive_2</td>\n","      <td>positive interaction</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>train_positive_1</td>\n","      <td>positive interaction</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>test1 (3)</td>\n","      <td>positive interaction</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>test1 (1)</td>\n","      <td>positive interaction</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>test1 (2)</td>\n","      <td>positive interaction</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>j-walking pedestrian</td>\n","      <td>negative interaction</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bb2965c7-0cdf-4ef1-867d-0f4ba7f5d394')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-bb2965c7-0cdf-4ef1-867d-0f4ba7f5d394 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-bb2965c7-0cdf-4ef1-867d-0f4ba7f5d394');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}],"source":["train_df = pd.read_csv(\"/content/gdrive/MyDrive/ucf101_top5/train.csv\")\n","test_df = pd.read_csv(\"/content/gdrive/MyDrive/ucf101_top5/test.csv\")\n","\n","print(f\"Total videos for training: {len(train_df)}\")\n","print(f\"Total videos for testing: {len(test_df)}\")\n","\n","train_df.sample(len(train_df))"]},{"cell_type":"markdown","metadata":{"id":"RQmpiMoKKhV9"},"source":["One of the many challenges of training video classifiers is figuring out a way to feed\n","the videos to a network. [This blog post](https://blog.coast.ai/five-video-classification-methods-implemented-in-keras-and-tensorflow-99cad29cc0b5)\n","discusses five such methods. Since a video is an ordered sequence of frames, we could\n","just extract the frames and put them in a 3D tensor. But the number of frames may differ\n","from video to video which would prevent us from stacking them into batches\n","(unless we use padding). As an alternative, we can **save video frames at a fixed\n","interval until a maximum frame count is reached**. In this example we will do\n","the following:\n","\n","1. Capture the frames of a video.\n","2. Extract frames from the videos until a maximum frame count is reached.\n","3. In the case, where a video's frame count is lesser than the maximum frame count we\n","will pad the video with zeros.\n","\n","Note that this workflow is identical to [problems involving texts sequences](https://developers.google.com/machine-learning/guides/text-classification/). Videos of the UCF101 dataset is [known](https://www.crcv.ucf.edu/papers/UCF101_CRCV-TR-12-01.pdf)\n","to not contain extreme variations in objects and actions across frames. Because of this,\n","it may be okay to only consider a few frames for the learning task. But this approach may\n","not generalize well to other video classification problems. We will be using\n","[OpenCV's `VideoCapture()` method](https://docs.opencv.org/master/dd/d43/tutorial_py_video_display.html)\n","to read frames from videos."]},{"cell_type":"code","execution_count":8,"metadata":{"id":"2obaS-gEKhWF","executionInfo":{"status":"ok","timestamp":1648701979355,"user_tz":420,"elapsed":230,"user":{"displayName":"Anurag Bhattacharjee","userId":"08854261231076586025"}}},"outputs":[],"source":["# The following two methods are taken from this tutorial:\n","# https://www.tensorflow.org/hub/tutorials/action_recognition_with_tf_hub\n","\n","\n","def crop_center_square(frame):\n","    y, x = frame.shape[0:2]\n","    min_dim = min(y, x)\n","    start_x = (x // 2) - (min_dim // 2)\n","    start_y = (y // 2) - (min_dim // 2)\n","    return frame[start_y : start_y + min_dim, start_x : start_x + min_dim]\n","\n","\n","def load_video(path, max_frames=0, resize=(IMG_SIZE, IMG_SIZE)):\n","    cap = cv2.VideoCapture(path)\n","    frames = []\n","    try:\n","        while True:\n","            ret, frame = cap.read()\n","            if not ret:\n","                break\n","            frame = crop_center_square(frame)\n","            frame = cv2.resize(frame, resize)\n","            frame = frame[:, :, [2, 1, 0]]\n","            frames.append(frame)\n","\n","            if len(frames) == max_frames:\n","                break\n","    finally:\n","        cap.release()\n","    return np.array(frames)\n"]},{"cell_type":"markdown","metadata":{"id":"ezqi3WCeKhWH"},"source":["We can use a pre-trained network to extract meaningful features from the extracted\n","frames. The [`Keras Applications`](https://keras.io/api/applications/) module provides\n","a number of state-of-the-art models pre-trained on the [ImageNet-1k dataset](http://image-net.org/).\n","We will be using the [InceptionV3 model](https://arxiv.org/abs/1512.00567) for this purpose."]},{"cell_type":"code","execution_count":7,"metadata":{"id":"fQKjrq9nKhWJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648673097743,"user_tz":420,"elapsed":4409,"user":{"displayName":"Anurag Bhattacharjee","userId":"08854261231076586025"}},"outputId":"77370bd2-c3d3-4c02-a305-345926e16500"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","87916544/87910968 [==============================] - 1s 0us/step\n","87924736/87910968 [==============================] - 1s 0us/step\n"]}],"source":["\n","def build_feature_extractor():\n","    feature_extractor = keras.applications.InceptionV3(\n","        weights=\"imagenet\",\n","        include_top=False,\n","        pooling=\"avg\",\n","        input_shape=(IMG_SIZE, IMG_SIZE, 3),\n","    )\n","    preprocess_input = keras.applications.inception_v3.preprocess_input\n","\n","    inputs = keras.Input((IMG_SIZE, IMG_SIZE, 3))\n","    preprocessed = preprocess_input(inputs)\n","\n","    outputs = feature_extractor(preprocessed)\n","    return keras.Model(inputs, outputs, name=\"feature_extractor\")\n","\n","\n","feature_extractor = build_feature_extractor()\n"]},{"cell_type":"code","source":["def build_feature_extractor():\n","    feature_extractor = keras.applications.vgg16.VGG16(\n","    include_top=False,\n","    weights='imagenet',\n","    input_tensor=None,\n","    input_shape=(IMG_SIZE, IMG_SIZE, 3),\n","    pooling=\"avg\",\n","    classes=2,\n","    classifier_activation='softmax'\n",")\n","    preprocess_input = keras.applications.inception_v3.preprocess_input\n","\n","    inputs = keras.Input((IMG_SIZE, IMG_SIZE, 3))\n","    preprocessed = preprocess_input(inputs)\n","\n","    outputs = feature_extractor(preprocessed)\n","    return keras.Model(inputs, outputs, name=\"feature_extractor\")\n","\n","\n","feature_extractor = build_feature_extractor()"],"metadata":{"id":"0sNn5n_Fa4Bg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648701987353,"user_tz":420,"elapsed":1560,"user":{"displayName":"Anurag Bhattacharjee","userId":"08854261231076586025"}},"outputId":"5af5e081-bd05-4b66-a277-959632cade63"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n","58892288/58889256 [==============================] - 0s 0us/step\n","58900480/58889256 [==============================] - 0s 0us/step\n"]}]},{"cell_type":"markdown","metadata":{"id":"UOpa-eKbKhWK"},"source":["The labels of the videos are strings. Neural networks do not understand string values,\n","so they must be converted to some numerical form before they are fed to the model. Here\n","we will use the [`StringLookup`](https://keras.io/api/layers/preprocessing_layers/categorical/string_lookup)\n","layer encode the class labels as integers."]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4FnfXUH_KhWL","executionInfo":{"status":"ok","timestamp":1648701993530,"user_tz":420,"elapsed":235,"user":{"displayName":"Anurag Bhattacharjee","userId":"08854261231076586025"}},"outputId":"a642f5e3-5d18-4ff0-d634-ace83f89a11f"},"outputs":[{"output_type":"stream","name":"stdout","text":["['negative interaction', 'positive interaction']\n"]}],"source":["label_processor = keras.layers.StringLookup(\n","    num_oov_indices=0, vocabulary=np.unique(train_df[\"tag\"])\n",")\n","print(label_processor.get_vocabulary())"]},{"cell_type":"markdown","metadata":{"id":"J7cUdXk9KhWM"},"source":["Finally, we can put all the pieces together to create our data processing utility."]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aoFBgACHKhWO","executionInfo":{"status":"ok","timestamp":1648701996321,"user_tz":420,"elapsed":241,"user":{"displayName":"Anurag Bhattacharjee","userId":"08854261231076586025"}},"outputId":"1b5829e2-c4fa-4b99-a1f1-89c8122fb688"},"outputs":[{"output_type":"stream","name":"stdout","text":["Frame features in train set: (8, 20, 8192)\n","Frame masks in train set: (8, 20)\n"]}],"source":["\n","def prepare_all_videos(df, root_dir):\n","    num_samples = len(df)\n","    video_paths = df[\"video_name\"].values.tolist()\n","    labels = df[\"tag\"].values\n","    labels = label_processor(labels[..., None]).numpy()\n","\n","    # `frame_masks` and `frame_features` are what we will feed to our sequence model.\n","    # `frame_masks` will contain a bunch of booleans denoting if a timestep is\n","    # masked with padding or not.\n","    frame_masks = np.zeros(shape=(num_samples, MAX_SEQ_LENGTH), dtype=\"bool\")\n","    frame_features = np.zeros(\n","        shape=(num_samples, MAX_SEQ_LENGTH, NUM_FEATURES), dtype=\"float32\"\n","    )\n","\n","    # For each video.\n","    for idx, path in enumerate(video_paths):\n","        # Gather all its frames and add a batch dimension.\n","        frames = load_video(os.path.join(root_dir, path))\n","        frames = frames[None, ...]\n","\n","        # Initialize placeholders to store the masks and features of the current video.\n","        temp_frame_mask = np.zeros(shape=(1, MAX_SEQ_LENGTH,), dtype=\"bool\")\n","        temp_frame_features = np.zeros(\n","            shape=(1, MAX_SEQ_LENGTH, NUM_FEATURES), dtype=\"float32\"\n","        )\n","\n","        # Extract features from the frames of the current video.\n","        for i, batch in enumerate(frames):\n","            video_length = batch.shape[0]\n","            length = min(MAX_SEQ_LENGTH, video_length)\n","            for j in range(length):\n","                temp_frame_features[i, j, :] = feature_extractor.predict(\n","                    batch[None, j, :]\n","                )\n","            temp_frame_mask[i, :length] = 1  # 1 = not masked, 0 = masked\n","\n","        frame_features[idx,] = temp_frame_features.squeeze()\n","        frame_masks[idx,] = temp_frame_mask.squeeze()\n","\n","    return (frame_features, frame_masks), labels\n","\n","\n","train_data, train_labels = prepare_all_videos(train_df, \"train\")\n","test_data, test_labels = prepare_all_videos(test_df, \"test\")\n","\n","print(f\"Frame features in train set: {train_data[0].shape}\")\n","print(f\"Frame masks in train set: {train_data[1].shape}\")"]},{"cell_type":"markdown","metadata":{"id":"-Xo66INMKhWT"},"source":["The above code block will take ~20 minutes to execute depending on the machine it's being\n","executed."]},{"cell_type":"markdown","metadata":{"id":"OWXP3LhLKhWv"},"source":["## The sequence model\n","\n","Now, we can feed this data to a sequence model consisting of recurrent layers like `GRU`."]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OveLHM-yKhXA","executionInfo":{"status":"ok","timestamp":1648702093003,"user_tz":420,"elapsed":9997,"user":{"displayName":"Anurag Bhattacharjee","userId":"08854261231076586025"}},"outputId":"012ff345-0895-4aa9-b792-7fdc3af30d95"},"outputs":[{"output_type":"stream","name":"stdout","text":["\r1/1 [==============================] - ETA: 0s - loss: 0.6931 - accuracy: 0.6000\n","Epoch 1: val_loss improved from inf to 0.69415, saving model to /tmp/video_classifier\n","1/1 [==============================] - 8s 8s/step - loss: 0.6931 - accuracy: 0.6000 - val_loss: 0.6941 - val_accuracy: 0.0000e+00\n","1/1 [==============================] - 0s 29ms/step - loss: 0.6931 - accuracy: 0.5000\n","Test accuracy: 50.0%\n"]}],"source":["# Utility for our sequence model.\n","def get_sequence_model():\n","    class_vocab = label_processor.get_vocabulary()\n","\n","    frame_features_input = keras.Input((MAX_SEQ_LENGTH, NUM_FEATURES))\n","    mask_input = keras.Input((MAX_SEQ_LENGTH,), dtype=\"bool\")\n","\n","    # Refer to the following tutorial to understand the significance of using `mask`:\n","    # https://keras.io/api/layers/recurrent_layers/gru/\n","    x = keras.layers.GRU(16, return_sequences=True)(\n","        frame_features_input, mask=mask_input\n","    )\n","    x = keras.layers.GRU(8)(x)\n","    x = keras.layers.Dropout(0.4)(x)\n","    x = keras.layers.Dense(8, activation=\"relu\")(x)\n","    output = keras.layers.Dense(len(class_vocab), activation=\"softmax\")(x)\n","\n","    rnn_model = keras.Model([frame_features_input, mask_input], output)\n","\n","    rnn_model.compile(\n","        loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"]\n","    )\n","    return rnn_model\n","\n","\n","# Utility for running experiments.\n","def run_experiment():\n","    filepath = \"/tmp/video_classifier\"\n","    checkpoint = keras.callbacks.ModelCheckpoint(\n","        filepath, save_weights_only=True, save_best_only=True, verbose=1\n","    )\n","\n","    seq_model = get_sequence_model()\n","    history = seq_model.fit(\n","        [train_data[0], train_data[1]],\n","        train_labels,\n","        validation_split=0.3,\n","        epochs=EPOCHS,\n","        callbacks=[checkpoint],\n","    )\n","\n","    seq_model.load_weights(filepath)\n","    _, accuracy = seq_model.evaluate([test_data[0], test_data[1]], test_labels)\n","    print(f\"Test accuracy: {round(accuracy * 100, 2)}%\")\n","\n","    return history, seq_model\n","\n","\n","_, sequence_model = run_experiment()"]},{"cell_type":"markdown","metadata":{"id":"Oxwo2vA-KhXC"},"source":["**Note**: To keep the runtime of this example relatively short, we just used a few\n","training examples. This number of training examples is low with respect to the sequence\n","model being used that has 99,909 trainable parameters. You are encouraged to sample more\n","data from the UCF101 dataset using [the notebook](https://colab.research.google.com/github/sayakpaul/Action-Recognition-in-TensorFlow/blob/main/Data_Preparation_UCF101.ipynb) mentioned above and train the same model."]},{"cell_type":"markdown","metadata":{"id":"Pu-FYkXcKhXG"},"source":["## Inference"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nRESAZqeKhXH","executionInfo":{"status":"ok","timestamp":1648702107542,"user_tz":420,"elapsed":3014,"user":{"displayName":"Anurag Bhattacharjee","userId":"08854261231076586025"}},"outputId":"9f4a7048-0d6f-4f9f-9291-043d8c732a7e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Test video path: test1 (4)\n","  negative interaction: 50.05%\n","  positive interaction: 49.95%\n"]}],"source":["\n","def prepare_single_video(frames):\n","    frames = frames[None, ...]\n","    frame_mask = np.zeros(shape=(1, MAX_SEQ_LENGTH,), dtype=\"bool\")\n","    frame_features = np.zeros(shape=(1, MAX_SEQ_LENGTH, NUM_FEATURES), dtype=\"float32\")\n","\n","    for i, batch in enumerate(frames):\n","        video_length = batch.shape[0]\n","        length = min(MAX_SEQ_LENGTH, video_length)\n","        for j in range(length):\n","            frame_features[i, j, :] = feature_extractor.predict(batch[None, j, :])\n","        frame_mask[i, :length] = 1  # 1 = not masked, 0 = masked\n","\n","    return frame_features, frame_mask\n","\n","\n","def sequence_prediction(path):\n","    class_vocab = label_processor.get_vocabulary()\n","\n","    frames = load_video(os.path.join(\"test\", path))\n","    frame_features, frame_mask = prepare_single_video(frames)\n","    probabilities = sequence_model.predict([frame_features, frame_mask])[0]\n","\n","    for i in np.argsort(probabilities)[::-1]:\n","        print(f\"  {class_vocab[i]}: {probabilities[i] * 100:5.2f}%\")\n","    return frames\n","\n","\n","# This utility is for visualization.\n","# Referenced from:\n","# https://www.tensorflow.org/hub/tutorials/action_recognition_with_tf_hub\n","#def to_gif(images):\n","    #converted_images = images.astype(np.uint8)\n","    #imageio.mimsave(\"animation.gif\", converted_images, fps=10)\n","    #return embed.embed_file(\"animation.gif\")\n","\n","\n","test_video = np.random.choice(test_df[\"video_name\"].values.tolist())\n","print(f\"Test video path: {test_video}\")\n","test_frames = sequence_prediction(test_video)\n","#to_gif(test_frames[:MAX_SEQ_LENGTH])"]},{"cell_type":"markdown","metadata":{"id":"ofUc1TtRKhXI"},"source":["## Next steps\n","\n","* In this example, we made use of transfer learning for extracting meaningful features\n","from video frames. You could also fine-tune the pre-trained network to notice how that\n","affects the end results.\n","* For speed-accuracy trade-offs, you can try out other models present inside\n","`tf.keras.applications`.\n","* Try different combinations of `MAX_SEQ_LENGTH` to observe how that affects the\n","performance.\n","* Train on a higher number of classes and see if you are able to get good performance.\n","* Following [this tutorial](https://www.tensorflow.org/hub/tutorials/action_recognition_with_tf_hub), try a\n","[pre-trained action recognition model](https://arxiv.org/abs/1705.07750) from DeepMind.\n","* Rolling-averaging can be useful technique for video classification and it can be\n","combined with a standard image classification model to infer on videos.\n","[This tutorial](https://www.pyimagesearch.com/2019/07/15/video-classification-with-keras-and-deep-learning/)\n","will help understand how to use rolling-averaging with an image classifier.\n","* When there are variations in between the frames of a video not all the frames might be\n","equally important to decide its category. In those situations, putting a\n","[self-attention layer](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Attention) in the\n","sequence model will likely yield better results.\n","* Following [this book chapter](https://livebook.manning.com/book/deep-learning-with-python-second-edition/chapter-11),\n","you can implement Transformers-based models for processing videos."]}],"metadata":{"colab":{"collapsed_sections":[],"name":"Copy of video_classification_revised","provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/vision/ipynb/video_classification.ipynb","timestamp":1648605154350}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"}},"nbformat":4,"nbformat_minor":0}